/*
 * SD-card control classes
 * Include file
 * 	File: sdcard_ctrl
 *	Author:  aso (Solomatov A.A.)
 *	Created: 28.04.2022
 *	Date:	 20.09.2022
 *	Version: 0.7
 */


//using namespace idf;
//using namespace std;


#pragma once

// is string 'str' is empty or NULL?
inline bool empty(const char* const str) {
    return str == NULL || str[0] == '\0'; }


/*
 * Предлагаемые команды:
 *    -	sd - main command for manipulation with SD-caed
 *	+ m, mount	- mount sdcard, options: [<card>] [<mountpoint>];
 *	+ u, umount	- unmount sdcard, options: [<card>|<mountpiont>];
 *	+ pwd		- get current directory name, w/o options;
 *	+ cd		- change a current directory
 *	+ ls, dir	- list of files in sdcard, options: [<file pattern>];
 *	+ cd <dir>	- change dir;
 *	+ cat <file>	- print file to console
 *	+ type [<file>]	- type text to cinsile and store it in the file optionally
 *	+ cp, copy	- copy file, options: [<src file>|<dest file>];
 *	+ mv, move	- move or rename file, options: [<src file>|<dest file>];
 */


#ifndef __cplusplus
#error "The sdcard_ctrl file usable in C++ projects only."
#endif


// Mw delay for the SD/MMC command execution
//#define SDMMC_COMMAND_TIMEOUT 500

namespace Exec	//-----------------------------------------------------------------------------------------------------
{

class Server
{
public:
    esp_err_t mount(SDMMC::Device&, SDMMC::Card&);	// Mount SD-card to Device with default parameters
    esp_err_t mount(SDMMC::Device&, SDMMC::Card&, const char mountpoint[]);	// Mount default SD-card slot onto path "mountpoint"
    esp_err_t mount(SDMMC::Device&, SDMMC::Card&, int slot_no);		// Mount SD-card slot "slot_no" onto default mount path
    esp_err_t mount(SDMMC::Device&, SDMMC::Card&, int slot_no, const char mountpoint[]);  // Mount SD-card slot "slot_no" onto default mount path

    esp_err_t unmount(SDMMC::Device&/*, const char mountpath[] = NULL*/);	// Unmount SD-card from Device
//    esp_err_t unmount(sdmmc_card_t *card);	// Unmount SD-card "card", mounted onto default mountpath
//    esp_err_t unmount(const char *base_path, sdmmc_card_t *card);	// Unmount mounted SD-card "card", mounted onto mountpath

    esp_err_t pwd(SDMMC::Device&);	// print current directory name
    esp_err_t mkdir(SDMMC::Device&, const char dirname[] = NULL);   // create a new directory
    esp_err_t cd(SDMMC::Device&, const char dirname[] = NULL);	// change a current directory
    esp_err_t ls(SDMMC::Device&, const char pattern[] = ".");	// print a list of files in the specified directory
    esp_err_t cp(SDMMC::Device&, const char /*src*/[] = NULL, const char /*dest*/[] = NULL);	// copy files src to dest
    esp_err_t mv(/*SDMMC::Device&,*/ const char src[] = NULL, const char dest[] = NULL);	// move files from src to dest
    esp_err_t rm(SDMMC::Device&, const char pattern[] = NULL);	// remove files according a pattern
    esp_err_t rmdir(SDMMC::Device&, const char dirname[] = NULL);   // remove an empty existing directory

    esp_err_t cat(SDMMC::Device&, const char fname[] = NULL);	// type file contents

    esp_err_t type();	// type text from keyboard to screen
    esp_err_t type(SDMMC::Device&, const char fname[], size_t = 512);	// type text from keyboard to file and to screen

private:
    esp_err_t ret;

    static const char* const MOUNT_POINT_Default;


    static const char* TAG;

}; /* class Server */

}; //--[ namespace Exec ]----------------------------------------------------------------------------------------------


#if 0

/********** Content of the file sd_card_example.main.c **********/



void app_main(void)
{


    ESP_LOGI(TAG, "Mounting filesystem");
    ret = esp_vfs_fat_sdmmc_mount(mount_point, &host, &slot_config, &mount_config, &card);

    if (ret != ESP_OK) {
        if (ret == ESP_FAIL) {
            ESP_LOGE(TAG, "Failed to mount filesystem. "
                     "If you want the card to be formatted, set the EXAMPLE_FORMAT_IF_MOUNT_FAILED menuconfig option.");
        } else {
            ESP_LOGE(TAG, "Failed to initialize the card (%s). "
                     "Make sure SD card lines have pull-up resistors in place.", esp_err_to_name(ret));
        }
        return;
    }
    ESP_LOGI(TAG, "Filesystem mounted");

    // Card has been initialized, print its properties
    sdmmc_card_print_info(stdout, card);

    // Use POSIX and C standard library functions to work with files:

    // First create a file.
    const char *file_hello = MOUNT_POINT"/hello.txt";

    ESP_LOGI(TAG, "Opening file %s", file_hello);
    FILE *f = fopen(file_hello, "w");
    if (f == NULL) {
        ESP_LOGE(TAG, "Failed to open file for writing");
        return;
    }
    fprintf(f, "Hello %s!\n", card->cid.name);
    fclose(f);
    ESP_LOGI(TAG, "File written");

    const char *file_foo = MOUNT_POINT"/foo.txt";

    // Check if destination file exists before renaming
    struct stat st;
    if (stat(file_foo, &st) == 0) {
        // Delete it if it exists
        unlink(file_foo);
    }

    // Rename original file
    ESP_LOGI(TAG, "Renaming file %s to %s", file_hello, file_foo);
    if (rename(file_hello, file_foo) != 0) {
        ESP_LOGE(TAG, "Rename failed");
        return;
    }

    // Open renamed file for reading
    ESP_LOGI(TAG, "Reading file %s", file_foo);
    f = fopen(file_foo, "r");
    if (f == NULL) {
        ESP_LOGE(TAG, "Failed to open file for reading");
        return;
    }

    // Read a line from file
    char line[64];
    fgets(line, sizeof(line), f);
    fclose(f);

    // Strip newline
    char *pos = strchr(line, '\n');
    if (pos) {
        *pos = '\0';
    }
    ESP_LOGI(TAG, "Read from file: '%s'", line);

    // All done, unmount partition and disable SDMMC peripheral
    esp_vfs_fat_sdcard_unmount(mount_point, card);
    ESP_LOGI(TAG, "Card unmounted");
}

#endif

//--[ sdcard_ctrl.hpp ]----------------------------------------------------------------------------
