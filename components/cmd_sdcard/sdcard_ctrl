/*
 * SD-card control classes
 * Include file
 * 	File: sdcard_ctrl
 *	Author:  aso (Solomatov A.A.)
 *	Created: 28.04.2022
 *	Date:	 20.09.2022
 *	Version: 0.7
 */


//using namespace idf;
//using namespace std;


#pragma once

//// is string 'str' is empty or NULL?
//inline bool empty(const char* const str) {
//    return str == NULL || str[0] == '\0'; }


/*
 * Предлагаемые команды:
 *    -	sd - main command for manipulation with SD-caed
 *	+ m, mount	- mount sdcard, options: [<card>] [<mountpoint>];
 *	+ u, umount	- unmount sdcard, options: [<card>|<mountpiont>];
 *	+ pwd		- get current directory name, w/o options;
 *	+ cd		- change a current directory
 *	+ ls, dir	- list of files in sdcard, options: [<file pattern>];
 *	+ cd <dir>	- change dir;
 *	+ cat <file>	- print file to console
 *	+ type [<file>]	- type text to cinsile and store it in the file optionally
 *	+ cp, copy	- copy file, options: [<src file>|<dest file>];
 *	+ mv, move	- move or rename file, options: [<src file>|<dest file>];
 */


#ifndef __cplusplus
#error "The sdcard_ctrl file usable in C++ projects only."
#endif


// Mw delay for the SD/MMC command execution
//#define SDMMC_COMMAND_TIMEOUT 500

namespace Exec	//-----------------------------------------------------------------------------------------------------
{

class Server
{
public:
    esp_err_t mount(SDMMC::Device&, SDMMC::Card&);	// Mount SD-card to Device with default parameters
    esp_err_t mount(SDMMC::Device&, SDMMC::Card&, const char mountpoint[]);	// Mount default SD-card slot onto path "mountpoint"
    esp_err_t mount(SDMMC::Device&, SDMMC::Card&, int slot_no);		// Mount SD-card slot "slot_no" onto default mount path
    esp_err_t mount(SDMMC::Device&, SDMMC::Card&, int slot_no, const char mountpoint[]);  // Mount SD-card slot "slot_no" onto default mount path

    esp_err_t unmount(SDMMC::Device&/*, const char mountpath[] = NULL*/);	// Unmount SD-card from Device
//    esp_err_t unmount(sdmmc_card_t *card);	// Unmount SD-card "card", mounted onto default mountpath
//    esp_err_t unmount(const char *base_path, sdmmc_card_t *card);	// Unmount mounted SD-card "card", mounted onto mountpath

    esp_err_t pwd(SDMMC::Device&);	// print current directory name
    esp_err_t mkdir(SDMMC::Device&, const char dirname[] = NULL);   // create a new directory
    esp_err_t cd(SDMMC::Device&, const char dirname[] = NULL);	// change a current directory
    esp_err_t ls(SDMMC::Device&, const char pattern[] = ".");	// print a list of files in the specified directory
    esp_err_t cp(SDMMC::Device&, const char[] = NULL, const char[] = NULL);	// copy files src to dest
    esp_err_t mv(SDMMC::Device&, const char src[] = NULL, const char dest[] = NULL);	// move files from src to dest
    esp_err_t rm(SDMMC::Device&, const char pattern[] = NULL);	// remove files according a pattern
    esp_err_t rmdir(SDMMC::Device&, const char dirname[] = NULL);   // remove an empty existing directory

    esp_err_t cat(SDMMC::Device&, const char fname[] = NULL);	// type file contents

    esp_err_t type();	// type text from keyboard to screen
    esp_err_t type(SDMMC::Device&, const char fname[], size_t = 512);	// type text from keyboard to file and to screen

private:
    esp_err_t ret;

//    // if the basename (the last part of the path) - has the characteristics
//    // of a directory name, and a dirname (the path prefix) -
//    // is an existing file, not a directory, or any other impossible variants
//    // of the full file/path name
//    bool inconsistent_path(char[]);
//    bool dir_tail(const char[]);	// is the filename ending really like as a directory name end?

    static const char* const MOUNT_POINT_Default;


    static const char* TAG;

}; /* class Server */

}; //--[ namespace Exec ]----------------------------------------------------------------------------------------------


//--[ sdcard_ctrl.hpp ]----------------------------------------------------------------------------
