//
// Calling function with parameters,
// packeted in tuple.
//
// tuplecaller
// Header file
//
// author: Solomatov A.A. (aso)
// ver.  : v.1.0.1
// date  : 05.07.22.
//


#ifndef __TUPLECALLER_ASO__
#define __TUPLECALLER_ASO__

#include <functional>

namespace aso
{

    template <typename ...ParamTypes>
    class simple
    {
    public:

	template <typename TypeRet>
	static TypeRet tuple_caller(std::function<TypeRet(ParamTypes...)>&& fn, const std::tuple<ParamTypes...>& argstuple) {
	    return Tuple<sizeof...(ParamTypes)>::template caller<TypeRet>(fn, argstuple); };

	template <typename TypeRet>
	static TypeRet tuple_caller(std::function<TypeRet(ParamTypes...)>& fn, const std::tuple<ParamTypes...>& argstuple) {
	return Tuple<sizeof...(ParamTypes)>::template caller<TypeRet>(fn, argstuple); };

    private:

	template <std::size_t limit, std::size_t... params>
	class Tuple
	{
	public:

	    template <typename TypeRet>
	    static TypeRet caller(std::function<TypeRet(ParamTypes...)>& fn, const std::tuple<ParamTypes...>& argstuple) {
		return Tuple<limit-1, limit-1, params...>::caller(fn, argstuple); };
	}; /* Tuple */

	template <std::size_t... params>
	class Tuple<0, params...>
	{
	public:

	    template <typename TypeRet>
	    static TypeRet caller(std::function<TypeRet(ParamTypes...)>& fn, const std::tuple<ParamTypes...>& argstuple/*, TypeRet& ostr*/) {
	   	return fn(std::get<params>(argstuple)...); };
	}; /* Tuple<0, ParamTypes...> */

    }; /* simple */


    template <typename ReType, typename ...ParamTypes>
    inline ReType simple_tuplecaller(std::function<ReType(ParamTypes...)>&& fn, const std::tuple<ParamTypes...>& tupleargs)
    {
	return simple<ParamTypes...>::tuple_caller(fn, tupleargs);
    }; /* simple_tuplecaller */

}; // aso

#endif // __TUPLECALLER_ASO__

//--[ End of file tuplecaller ]--------------------------------------------------------------------
